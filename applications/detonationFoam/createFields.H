#include "createRDeltaT.H"

Info<< "Reading thermophysical properties\n" << endl;

autoPtr<psiThermo> pThermo
(
    psiThermo::New(mesh)
);
psiThermo& thermo = pThermo();

volScalarField& e = thermo.he();



// const scalar molWeight0 = thermo.subDict("mixture").subDict("specie").lookupOrDefault<scalar>(
//     "molWeight", 0.0);
// // dimensionedScalar molWeight("molWeight", dimless, thermo);
// Info << "Gas constant: "
//      << Foam::constant::thermodynamic::RR / molWeight0
//      << "\n"
//      << endl;
// dimensionedScalar molWeight("molWeight", dimMass/dimMoles, molWeight0);


dimensionedScalar Sc("Sc", dimless, thermo);

Info<< "Reading chemical properties\n" << endl;
IOdictionary chemicalProperties
(
    IOobject
    (
        "chemicalProperties",
        runTime.constant(),
        mesh,
        IOobject::MUST_READ,
        IOobject::NO_WRITE
    )
);

dimensionedScalar Q("Q", dimEnergy/dimMass, chemicalProperties);
dimensionedScalar E("E", dimEnergy/dimMass, chemicalProperties);
dimensionedScalar k("k", inv(dimTime), chemicalProperties);
dimensionedScalar T0("T0", dimTemperature, chemicalProperties);


Info<< "Reading field lambda\n" << endl;
volScalarField lambda
(
    IOobject
    (
        "lambda",
        runTime.timeName(),
        mesh,
        IOobject::MUST_READ,
        IOobject::AUTO_WRITE
    ),
    mesh
);

Info<< "Reading field U\n" << endl;
volVectorField U
(
    IOobject
    (
        "U",
        runTime.timeName(),
        mesh,
        IOobject::MUST_READ,
        IOobject::AUTO_WRITE
    ),
    mesh
);

volScalarField rho
(
    IOobject
    (
        "rho",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::AUTO_WRITE
    ),
    thermo.rho()
);

volVectorField rhoU
(
    IOobject
    (
        "rhoU",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::NO_WRITE
    ),
    rho*U
);

volScalarField rhoE
(
    IOobject
    (
        "rhoE",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::NO_WRITE
    ),
    rho*(e + 0.5*magSqr(U) - lambda*Q)
);

volScalarField rhoLambda
(
    IOobject
    (
        "rhoLambda",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::NO_WRITE
    ),
    rho*lambda
);

surfaceScalarField pos
(
    IOobject
    (
        "pos",
        runTime.timeName(),
        mesh
    ),
    mesh,
    dimensionedScalar("pos", dimless, 1.0)
);

surfaceScalarField neg
(
    IOobject
    (
        "neg",
        runTime.timeName(),
        mesh
    ),
    mesh,
    dimensionedScalar("neg", dimless, -1.0)
);

surfaceScalarField phi("phi", fvc::flux(rhoU));

Info<< "Creating turbulence model\n" << endl;
autoPtr<compressible::turbulenceModel> turbulence
(
    compressible::turbulenceModel::New
    (
        rho,
        U,
        phi,
        thermo
    )
);

autoPtr<movingReferenceFrame> MRF(movingReferenceFrame::New(mesh));

// Indicator for mesh refinement
autoPtr<volScalarField> normalisedGradRhoPtr;
if (mesh.dynamic())
{
    normalisedGradRhoPtr.reset
    (
        new volScalarField
        (
            IOobject
            (
                "normalisedGradRho",
                runTime.timeName(),
                mesh,
                IOobject::NO_READ,
                IOobject::AUTO_WRITE
            ),
            mesh,
            dimDensity/dimLength
        )
    );
}
