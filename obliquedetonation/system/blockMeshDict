/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


scale   1;

vertices
(
    (-0.15242 0       -0.005)
    ( 0       0       -0.005)
    ( 0.3048  0.081670913853  -0.005)
    (-0.15242 0.1524 -0.005)
    ( 0       0.1524 -0.005)
    ( 0.3048  0.1524 -0.005)

    (-0.15242 0        0.005)
    ( 0       0        0.005)
    ( 0.3048  0.081670913853 0.005)
    (-0.15242 0.1524  0.005)
    ( 0       0.1524  0.005)
    ( 0.3048  0.1524  0.005)

);

blocks
(
    hex (0 1 4 3 6 7 10 9 ) (40 40 1) simpleGrading (1 1 1)
    hex (1 2 5 4 7 8 11 10) (80 40 1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 6 9 3)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (2 5 11 8)
        );
    }
    bottom
    {
        type symmetryPlane;
        faces
        (
            (0 1 7 6)
        );
    }
    top
    {
        type symmetryPlane;
        faces
        (
            (3 9 10 4)
            (4 10 11 5)
        );
    }
    obstacle
    {
        type patch;
        faces
        (
            (1 2 8 7)
        );
    }
);

mergePatchPairs
(
);

// scale   1;
//
// L   100;
// D   50;
// N   10;
//
// vertices
// (
//     (0 0 0)
//     ($L 0 0)
//     ($L 1 0)
//     (0 1 0)
//     (0 0 $D)
//     ($L 0 $D)
//     ($L 1 $D)
//     (0 1 $D)
// );
//
// blocks
// (
//     hex (0 1 2 3 4 5 6 7) (#eval "$N*$L" 1 #eval "$N*$D") simpleGrading (1 1 1)
// );
//
// edges
// (
// );
//
// boundary
// (
//     left
//     {
//         type wall;
//         faces
//         (
//             (0 4 7 3)
//         );
//     }
//     right
//     {
//         type wall;
//         faces
//         (
//             (2 6 5 1)
//         );
//     }
//     topAndBottom
//     {
//         type wall;
//         faces
//         (
//             (0 3 2 1)
//             (4 5 6 7)
//         );
//     }
//     empty
//     {
//         type empty;
//         faces
//         (
//             (3 7 6 2)
//             (1 5 4 0)
//         );
//     }
// );
//
// mergePatchPairs
// (
// );

/*vertices
(
    (-0.0041 0 -0.005) //0
    ( 0 0 -0.005) //1
    ( 0.0041 0.001740346746 -0.005) //2
    (-0.0041 0.03 -0.005) //3
    ( 0 0.03 -0.005) //4
    (0.0041 0.03 -0.005) //5
    (0.0082 0.001740346746 -0.005) //6
    (0.0082 0.03 -0.005) //7
    (-0.0041 0 0.005) //8
    ( 0 0 0.005) //9
    ( 0.0041 0.001740346746 0.005) //10
    (-0.0041 0.03 0.005) //11
    ( 0 0.03 0.005) //12
    ( 0.0041 0.03 0.005) //13
    (0.0082 0.001740346746 0.005) //14
    (0.0082 0.03 0.005) //15
);*/

/*blocks
(
 hex (0 1 4 3 8 9 12 11 ) (80 200 1) simpleGrading (1 8 1)
 hex (1 2 5 4 9 10 13 12) (80 200 1) simpleGrading (1 8 1)
 hex (2 6 7 5 10 14 15 13) (20 200 1) simpleGrading (5 8 1)
);*/

/*blocks
(
 hex (0 1 4 3 8 9 12 11 ) (40 100 1) simpleGrading (1 8 1)
 hex (1 2 5 4 9 10 13 12) (40 100 1) simpleGrading (1 8 1)
 hex (2 6 7 5 10 14 15 13) (10 100 1) simpleGrading (5 8 1)
);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 8 11 3)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (6 7 15 14)
        );
    }
    bottom
    {
        type symmetryPlane;
        // type wall;
        faces
        (
            (0 1 9 8)
        );
    }
    top
    {
        type patch;
        faces
        (
            (3 11 12 4)
            (4 12 13 5)
            (5 13 15 7)
        );
    }
    obstacle
    {
        type wall;
        faces
        (
            (1 2 10 9)
            (2 6 14 10)
        );
    }
);

mergePatchPairs
(
);*/

// ************************************************************************* //
